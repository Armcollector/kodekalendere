from functools import lru_cache
pattern = (0,1,0,-1)

signal = [int(i) for i in str(12345678)]

@lru_cache(maxsize=None)
def pattern_digit_i(p, i,l):
    pat = []
    for j in p:
        pat += [j]*i
    while len(pat) < l+2:
        pat += pat
    
    return pat[1:l+1]
        
signal = [int(i) for i in str(59773590431003134109950482159532121838468306525505797662142691007448458436452137403459145576019785048254045936039878799638020917071079423147956648674703093863380284510436919245876322537671069460175238260758289779677758607156502756182541996384745654215348868695112673842866530637231316836104267038919188053623233285108493296024499405360652846822183647135517387211423427763892624558122564570237850906637522848547869679849388371816829143878671984148501319022974535527907573180852415741458991594556636064737179148159474282696777168978591036582175134257547127308402793359981996717609700381320355038224906967574434985293948149977643171410237960413164669930)]
    
for _ in range(100):
    pattern_digit_i(pattern, 1,8)
    signal = [abs(sum( i*s for i,s in zip(pattern_digit_i(pattern,j,len(signal)), signal)))%10 for j in range(1,len(signal)+1) ]
    
"".join(str(i) for i in signal[:8])